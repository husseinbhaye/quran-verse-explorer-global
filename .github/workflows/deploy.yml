
name: Build & Deploy to Web Server via SFTP

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build
        
      # Create enhanced .htaccess file for SPA routing with stronger cache control
      - name: Create .htaccess file for SPA routing with cache control
        run: |
          echo '<IfModule mod_rewrite.c>' > dist/.htaccess
          echo '  RewriteEngine On' >> dist/.htaccess
          echo '  RewriteBase /' >> dist/.htaccess
          echo '  RewriteRule ^index\.html$ - [L]' >> dist/.htaccess
          echo '  RewriteCond %{REQUEST_FILENAME} !-f' >> dist/.htaccess
          echo '  RewriteCond %{REQUEST_FILENAME} !-d' >> dist/.htaccess
          echo '  RewriteRule . /index.html [L]' >> dist/.htaccess
          echo '</IfModule>' >> dist/.htaccess
          echo '' >> dist/.htaccess
          echo '# Cache Control' >> dist/.htaccess
          echo '<IfModule mod_headers.c>' >> dist/.htaccess
          echo '  # Disable caching for all files' >> dist/.htaccess
          echo '  <FilesMatch "\\.(html|htm|js|json|css)$">' >> dist/.htaccess
          echo '    Header set Cache-Control "no-store, no-cache, must-revalidate, max-age=0"' >> dist/.htaccess
          echo '    Header set Pragma "no-cache"' >> dist/.htaccess
          echo '    Header set Expires "0"' >> dist/.htaccess
          echo '  </FilesMatch>' >> dist/.htaccess
          echo '</IfModule>' >> dist/.htaccess

      - name: List build output
        run: |
          echo "=== Listing build output ==="
          ls -la dist/
          echo "=== End of listing ==="

      - name: Debug connection
        run: |
          echo "Attempting to connect to server..."
          echo "Host: ${{ secrets.FTP_HOST }}"
          echo "Username: ${{ secrets.FTP_USERNAME }}"
          echo "Protocol: SFTP with port 22"
          echo "Remote path: /public_html/Quran/"

      # Create a more detailed deployment marker
      - name: Create deployment marker
        run: |
          echo "Deployment timestamp: $(date)" > dist/deployment-marker.txt
          echo "GitHub run ID: ${{ github.run_id }}" >> dist/deployment-marker.txt
          echo "Commit: ${{ github.sha }}" >> dist/deployment-marker.txt
          echo "Build time: $(date +%s)" >> dist/deployment-marker.txt

      # Add a version.json file for client-side cache busting
      - name: Create version file
        run: |
          echo "{\"version\":\"${{ github.sha }}\",\"buildTime\":\"$(date +%s)\"}" > dist/version.json

      - name: Deploy via SFTP
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ secrets.FTP_USERNAME }}
          server: ${{ secrets.FTP_HOST }}
          port: 22
          password: ${{ secrets.FTP_PASSWORD }}
          local_path: './dist/*'
          remote_path: '/public_html/Quran/'
          sftpArgs: '-o StrictHostKeyChecking=no -v'
          
      # Add a step to verify if files were deployed
      - name: Verify deployment
        run: |
          echo "Deployment completed at $(date)"
          echo "Check your website for updates and look for the deployment-marker.txt file"
          echo "If you still don't see changes, try clearing your browser cache or using an incognito window"
          echo "You can also verify by checking https://YOUR_DOMAIN/Quran/version.json"

